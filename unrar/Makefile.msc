# This is a Makefile for Microsoft NMAKE and compatible.
# This file is not officially part of the unrar source distribution. Use at your own risk.
# Only ANSI builds are produced.
# Please note, when specifying 'clean' as target, files in $(OUTDIR) are not deleted.
#
# DEBUG=1
# To produce a debug binary, invoke nmake by specifying DEBUG=1 on the command line
# ! Make sure you clean the project and delete output files
# prior to switching configurations !
#
# LOG=1
# To redirect build output to build.log, specify LOG=1.
#
# MSVCRT=1
# To link against the dll runtime instead of statically.
# Please note that use of multithreaded library is forced.
#


# Targets for this make file:
# 	unrars.lib static library
# 	unrarsd.lib static library (debug build)


# Configure target: output dir, intermediate dir
OUTDIR	=	..\lib

!IF DEFINED(DEBUG)
INTDIR	=	Debug
TARGET	=	unrarsd
EXT	=	lib
!MESSAGE Using Debug preset.
!ELSE
INTDIR	=	Release
TARGET	=	unrars
EXT	=	lib
!MESSAGE Using Release preset.
!ENDIF


!IF DEFINED(LOG)
ERRFILE	=	>> build.log
!ENDIF


# command processor programs
MAKE	=	nmake -nologo
CC	=	cl -nologo
CXX	=	cl -nologo
RC	=	rc /r
AR	=	lib -nologo
LD	=	link -nologo
RM	=       del /q
MKDIR	=	md
CP	=	copy /y

####################### Compiler related options. #######################
# _MBCS is always defined.
COMMON_DEFS =	-D_CRT_SECURE_NO_DEPRECATE -DSTRICT -DWIN32 -D_MBCS -DRARDLL -DSILENT -Fd"$(INTDIR)\\" -Fo"$(INTDIR)\\"
# EHsc  enables C++ exceptions, GR enables RTTI. You may want to disable some flags if applicable.
OPTFLAGS =	-EHsc -W3 -Wp64 -Zc:forScope,wchar_t -Gz
#-GR

# Select whether to link to MSVCRT(D) e.g. msvcr71.dll/msvcp71.dll or to link statically.
# First option is -MD, Second is -MT (resp. -MDd -MTd)
# Please note that use of multithreaded library is forced.

!IF DEFINED(MSVCRT)
LINKSPEC =	-MD
!ELSE
LINKSPEC =	-MT
!ENDIF


!IF DEFINED(DEBUG)
OPTFLAGS =	$(OPTFLAGS) -Od -D_LIB
CFLAGS_DEBUG=$(LINKSPEC)d -RTCsu -D_DEBUG -Zi
!ELSE
# Tweak optimization here
OPTFLAGS =	$(OPTFLAGS) -Ox -D_LIB
CFLAGS_RELEASE=$(LINKSPEC) -Gs -GS -DNDEBUG
!ENDIF

CXXFLAGS =	$(OPTFLAGS) $(COMMON_DEFS)

####################### Project specific options. #######################

COMMON_DEFS	=	$(COMMON_DEFS)

CXXFLAGS	=	$(CXXFLAGS) /wd4290
!IF DEFINED(DEBUG)
CXXFLAGS	=	$(CXXFLAGS) $(CFLAGS_DEBUG)
!ELSE
CXXFLAGS	=	$(CXXFLAGS) $(CFLAGS_RELEASE)
!ENDIF

####################### Compilation rules #######################

.cpp{$(INTDIR)}.obj::
   $(CXX) $(CXXFLAGS) -c $< $(ERRFILE)

ALL : "$(OUTDIR)\$(TARGET).$(EXT)"

"$(OUTDIR)" :
    if not exist "$(OUTDIR)/" $(MKDIR) "$(OUTDIR)"

"$(INTDIR)" :
    if not exist "$(INTDIR)/" $(MKDIR) "$(INTDIR)"


CLEAN :
	-@$(RM) "$(INTDIR)\*.obj" 2> NUL > NUL
	-@$(RM) "$(INTDIR)\*.idb" 2> NUL > NUL
	-@$(RM) "$(INTDIR)\*.ilk" 2> NUL > NUL


OBJ	=\
	"$(INTDIR)\dll.obj" \
	"$(INTDIR)\smallfn.obj" \
	"$(INTDIR)\strlist.obj" \
	"$(INTDIR)\strfn.obj" \
	"$(INTDIR)\pathfn.obj" \
	"$(INTDIR)\int64.obj" \
	"$(INTDIR)\savepos.obj" \
	"$(INTDIR)\global.obj" \
	"$(INTDIR)\file.obj" \
	"$(INTDIR)\filefn.obj" \
	"$(INTDIR)\filcreat.obj" \
	"$(INTDIR)\archive.obj" \
	"$(INTDIR)\arcread.obj" \
	"$(INTDIR)\unicode.obj" \
	"$(INTDIR)\system.obj" \
	"$(INTDIR)\isnt.obj" \
	"$(INTDIR)\crypt.obj" \
	"$(INTDIR)\crc.obj" \
	"$(INTDIR)\rawread.obj" \
	"$(INTDIR)\encname.obj" \
	"$(INTDIR)\resource.obj" \
	"$(INTDIR)\match.obj" \
	"$(INTDIR)\timefn.obj" \
	"$(INTDIR)\rdwrfn.obj" \
	"$(INTDIR)\consio.obj" \
	"$(INTDIR)\options.obj" \
	"$(INTDIR)\ulinks.obj" \
	"$(INTDIR)\errhnd.obj" \
	"$(INTDIR)\rarvm.obj" \
	"$(INTDIR)\rijndael.obj" \
	"$(INTDIR)\getbits.obj" \
	"$(INTDIR)\sha1.obj" \
	"$(INTDIR)\extinfo.obj" \
	"$(INTDIR)\extract.obj" \
	"$(INTDIR)\volume.obj" \
	"$(INTDIR)\list.obj" \
	"$(INTDIR)\find.obj" \
	"$(INTDIR)\unpack.obj" \
	"$(INTDIR)\cmddata.obj" \
	"$(INTDIR)\filestr.obj" \
	"$(INTDIR)\recvol.obj" \
	"$(INTDIR)\rs.obj" \
	"$(INTDIR)\scantree.obj"

"$(OUTDIR)\$(TARGET).lib" : "$(OUTDIR)" "$(INTDIR)" $(OBJ)
	echo something to del > "$(OUTDIR)\$(TARGET).lib"
	$(RM) "$(OUTDIR)\$(TARGET).lib"
	$(AR) /out:"$(OUTDIR)\$(TARGET).lib" $(OBJ) $(ERRFILE)



SOURCE=.\archive.cpp

"$(INTDIR)\archive.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\arcread.cpp

"$(INTDIR)\arcread.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\cmddata.cpp

"$(INTDIR)\cmddata.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\consio.cpp

"$(INTDIR)\consio.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\crc.cpp

"$(INTDIR)\crc.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\crypt.cpp

"$(INTDIR)\crypt.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\encname.cpp

"$(INTDIR)\encname.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\errhnd.cpp

"$(INTDIR)\errhnd.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\extinfo.cpp

"$(INTDIR)\extinfo.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\extract.cpp

"$(INTDIR)\extract.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\filcreat.cpp

"$(INTDIR)\filcreat.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\file.cpp

"$(INTDIR)\file.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\filefn.cpp

"$(INTDIR)\filefn.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\filestr.cpp

"$(INTDIR)\filestr.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\find.cpp

"$(INTDIR)\find.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\getbits.cpp

"$(INTDIR)\getbits.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\global.cpp

"$(INTDIR)\global.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\int64.cpp

"$(INTDIR)\int64.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\isnt.cpp

"$(INTDIR)\isnt.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\list.cpp

"$(INTDIR)\list.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\match.cpp

"$(INTDIR)\match.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\options.cpp

"$(INTDIR)\options.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\pathfn.cpp

"$(INTDIR)\pathfn.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\dll.cpp

"$(INTDIR)\dll.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\smallfn.cpp

"$(INTDIR)\smallfn.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\rarvm.cpp

"$(INTDIR)\rarvm.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\rawread.cpp

"$(INTDIR)\rawread.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\rdwrfn.cpp

"$(INTDIR)\rdwrfn.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\recvol.cpp

"$(INTDIR)\recvol.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\resource.cpp

"$(INTDIR)\resource.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\rijndael.cpp

"$(INTDIR)\rijndael.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\rs.cpp

"$(INTDIR)\rs.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\savepos.cpp

"$(INTDIR)\savepos.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\scantree.cpp

"$(INTDIR)\scantree.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\sha1.cpp

"$(INTDIR)\sha1.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\strfn.cpp

"$(INTDIR)\strfn.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\strlist.cpp

"$(INTDIR)\strlist.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\system.cpp

"$(INTDIR)\system.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\timefn.cpp

"$(INTDIR)\timefn.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\ulinks.cpp

"$(INTDIR)\ulinks.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\unicode.cpp

"$(INTDIR)\unicode.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\unpack.cpp

"$(INTDIR)\unpack.obj" : $(SOURCE) "$(INTDIR)"


SOURCE=.\volume.cpp

"$(INTDIR)\volume.obj" : $(SOURCE) "$(INTDIR)"

